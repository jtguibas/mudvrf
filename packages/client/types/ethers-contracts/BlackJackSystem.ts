/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BlackJackSystemInterface extends utils.Interface {
  functions: {
    "CALLBACK_GAS_LIMIT()": FunctionFragment;
    "NB_WORDS()": FunctionFragment;
    "ORACLE_ID()": FunctionFragment;
    "REQUEST_CONFIRMATIONS()": FunctionFragment;
    "dealUser()": FunctionFragment;
    "handleDealUser(bytes32,uint256[])": FunctionFragment;
    "handleStandUser(bytes32,uint256[])": FunctionFragment;
    "handleStartGame(bytes32,uint256[])": FunctionFragment;
    "standUser()": FunctionFragment;
    "startGame()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALLBACK_GAS_LIMIT"
      | "NB_WORDS"
      | "ORACLE_ID"
      | "REQUEST_CONFIRMATIONS"
      | "dealUser"
      | "handleDealUser"
      | "handleStandUser"
      | "handleStartGame"
      | "standUser"
      | "startGame"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALLBACK_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NB_WORDS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REQUEST_CONFIRMATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dealUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleDealUser",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handleStandUser",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handleStartGame",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "standUser", values?: undefined): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CALLBACK_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NB_WORDS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REQUEST_CONFIRMATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleDealUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleStandUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleStartGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "standUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;

  events: {};
}

export interface BlackJackSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlackJackSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<[number]>;

    NB_WORDS(overrides?: CallOverrides): Promise<[number]>;

    ORACLE_ID(overrides?: CallOverrides): Promise<[string]>;

    REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<[number]>;

    dealUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleDealUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleStandUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleStartGame(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    standUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<number>;

  NB_WORDS(overrides?: CallOverrides): Promise<number>;

  ORACLE_ID(overrides?: CallOverrides): Promise<string>;

  REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;

  dealUser(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleDealUser(
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleStandUser(
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleStartGame(
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  standUser(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<number>;

    NB_WORDS(overrides?: CallOverrides): Promise<number>;

    ORACLE_ID(overrides?: CallOverrides): Promise<string>;

    REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;

    dealUser(overrides?: CallOverrides): Promise<void>;

    handleDealUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    handleStandUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    handleStartGame(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    standUser(overrides?: CallOverrides): Promise<void>;

    startGame(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    NB_WORDS(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    dealUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleDealUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleStandUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleStartGame(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    standUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLBACK_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NB_WORDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REQUEST_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleDealUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleStandUser(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleStartGame(
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    standUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
