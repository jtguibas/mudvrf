/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  StorageProofOracle,
  StorageProofOracleInterface,
} from "../StorageProofOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "blockHashStoreAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "blockHashStore",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blockHashes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "importBlockHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "proveBlockHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "blockHeaders",
        type: "bytes[]",
      },
    ],
    name: "proveBlockHashesAndStateRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class StorageProofOracle__factory {
  static readonly abi = _abi;
  static createInterface(): StorageProofOracleInterface {
    return new utils.Interface(_abi) as StorageProofOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageProofOracle {
    return new Contract(address, _abi, signerOrProvider) as StorageProofOracle;
  }
}
